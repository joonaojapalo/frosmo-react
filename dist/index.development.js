"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var React=require("react"),React__default=_interopDefault(React),PropTypes=_interopDefault(require("prop-types")),assign=_interopDefault(require("object-assign"));function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _extends(){return(_extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}function _objectSpread(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),o.forEach(function(e){_defineProperty(t,e,n[e])})}return t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _possibleConstructorReturn(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?_assertThisInitialized(e):t}var ERR_SPA_UNAVALIABLE="frosmo.spa is not available, fallback to console.error";function error(e,t){if(!window||!window.frosmo||!window.frosmo.spa)return console.warn(ERR_SPA_UNAVALIABLE),void console.error(e);console.error(e)}var logger={error:error},DOM_EVENT_FROSMO_SPA_READY="frosmo.spa.ready",ModificationService=function(){function o(e){var t=e.id,n=e.onComplete;_classCallCheck(this,o);this._id=t,this._func=n||function(){},this._modificationContextHandle=null,this._fetchModifications=this._fetchModifications.bind(this)}return _createClass(o,[{key:"fetch",value:function(){window&&(window.frosmo&&window.frosmo.spa?this._fetchModifications():window.addEventListener?window.addEventListener(DOM_EVENT_FROSMO_SPA_READY,this._fetchModifications):window.attachEvent?window.attachEvent(DOM_EVENT_FROSMO_SPA_READY,this._fetchModifications):logger.error("Event cannot be attached"))}},{key:"_fetchModifications",value:function(){var t=this;this._modificationContextHandle=window.frosmo.spa.requestBySelector(this._id),this._modificationContextHandle.then(function(e){return t._func(e)}).catch(function(e){logger.error(e),t._func(null)})}},{key:"cancel",value:function(){this._modificationContextHandle&&(this._modificationContextHandle.cancel(),this._modificationContextHandle=null),window.removeEventListener?window.removeEventListener(DOM_EVENT_FROSMO_SPA_READY,this._fetchModifications):window.detachEvent?window.detachEvent(DOM_EVENT_FROSMO_SPA_READY,this._fetchModifications):logger.error("Event cannot be detached"),this._func=null}}]),o}(),ErrorBoundary=function(e){function t(){var e;return _classCallCheck(this,t),(e=_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))).state={isError:!1},e}return _inherits(t,React.Component),_createClass(t,[{key:"componentDidCatch",value:function(e,t){if("object"===_typeof(e)){var n=e.message,o=e.stack;(n||o)&&logger.error(n,o)}var r=this.props.onError;r&&r(e,t)}},{key:"render",value:function(){return this.state.isError?null:this.props.children}}],[{key:"getDerivedStateFromError",value:function(){return{isError:!0}}}]),t}();ErrorBoundary.propTypes={onError:PropTypes.func};var _States$DEFAULT,_transitions,StateMachine=function(){function n(e,t){if(_classCallCheck(this,n),this._transitions=e,!this._transitions[t])throw new Error("invalid initial state");this._state=t}return _createClass(n,[{key:"update",value:function(e){var t=this._transitions[this._state];if(t){var n=t[e];n&&(this._state=n)}}},{key:"state",get:function(){return this._state}}]),n}(),States={DEFAULT:"default",NULL:"null",SUCCESS:"success"},Tokens={FETCH_RESOLVE:"onFetchResolve",ERROR:"onError"},transitions=(_defineProperty(_transitions={},States.DEFAULT,(_defineProperty(_States$DEFAULT={},Tokens.FETCH_RESOLVE,States.SUCCESS),_defineProperty(_States$DEFAULT,Tokens.ERROR,States.NULL),_States$DEFAULT)),_defineProperty(_transitions,States.NULL,_defineProperty({},Tokens.FETCH_RESOLVE,States.SUCCESS)),_defineProperty(_transitions,States.SUCCESS,_defineProperty({},Tokens.ERROR,States.DEFAULT)),_transitions);function withModification(t){return function(e){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).onError=t.onError.bind(_assertThisInitialized(t)),e.id||console&&console.warn&&console.warn('FrosmoPlacement: "id" property missing.',e),t.stateMachine=new StateMachine(transitions,States.DEFAULT),t.state={state:t.stateMachine.state,modificationContext:null},t._modificationContextService=new ModificationService({id:e.id,onComplete:function(e){t.stateMachine.update(Tokens.FETCH_RESOLVE),t.setState({modificationContext:e,state:t.stateMachine.state})}}),t}return _inherits(n,React.Component),_createClass(n,[{key:"componentWillUnmount",value:function(){this._modificationContextService.cancel()}},{key:"componentDidMount",value:function(){this._modificationContextService.fetch()}},{key:"onError",value:function(e,t){this.stateMachine.update(Tokens.ERROR),this.setState({state:this.stateMachine.state}),this.props.onError&&this.props.onError(e,t)}},{key:"render",value:function(){switch(this.state.state){case States.DEFAULT:var e=this.props.defaultComponent;return e?React__default.createElement(ErrorBoundary,{onError:this.onError,key:"default"},React__default.createElement(e,this.props)):null;case States.SUCCESS:return React__default.createElement(ErrorBoundary,{onError:this.onError,key:"success"},React__default.createElement(t,_extends({modificationContext:this.state.modificationContext},this.props)));case States.NULL:default:return null}}}]),n}()}var _createReactElement=function(e){return e?React__default.createElement(e):null},hasChildren=function(e){return e&&0<React__default.Children.count(e)},buildMessageProps=function(e){return _objectSpread({},e.params,{frosmoModificationContext:e})},createReactComponent=function(e,t,n){return e?React__default.createElement(e,n):hasChildren(t)?React__default.Children.map(t,function(e){var t=assign({},e.props,n);return React__default.createElement(e.type,t)}):null},_renderSuccess=function(e){var t=e.children,n=e.component,o=e.defaultComponent,r=e.modificationContext,i=buildMessageProps(r),s=createReactComponent(n,t,i);return s?(r.setDisplayed(),s):_createReactElement(o)};function ChildComponent(e){var t=e.defaultComponent;return null!==e.modificationContext?_renderSuccess(e):_createReactElement(t)}var ModificationContextPropTypes={variation:PropTypes.number.isRequired,params:PropTypes.object.isRequired,content:PropTypes.string.isRequired,setDisplayed:PropTypes.func.isRequired,setClicked:PropTypes.func.isRequired,setTrueDisplayed:PropTypes.func.isRequired,setTrackableElements:PropTypes.func.isRequired,startTracking:PropTypes.func.isRequired,error:PropTypes.func.isRequired,clear:PropTypes.func.isRequired},FrosmoPropTypes={children:PropTypes.node,modificationContext:PropTypes.exact(ModificationContextPropTypes)},FrosmoComponentDefaultProps={children:null,component:null,defaultComponent:null,modificationContext:null},FrosmoPlacement=function(e){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,React.Component),_createClass(t,[{key:"componentDidMount",value:function(){var e=this.props.modificationContext;null!==e&&(e.setTrackableElements(this.frosmoMessage),e.startTracking())}},{key:"render",value:function(){var t=this,e=React__default.createElement(ChildComponent,this.props);return this.props.useFragment?React__default.createElement(React__default.Fragment,null,e):React__default.createElement("div",{"data-frosmo-elementid":this.props.id,ref:function(e){t.frosmoMessage=e}},e)}}]),t}();FrosmoPlacement.propTypes=FrosmoPropTypes,FrosmoPlacement.defaultProps=FrosmoComponentDefaultProps;var FrosmoPlacement$1=withModification(FrosmoPlacement);exports.FrosmoPlacement=FrosmoPlacement$1;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
