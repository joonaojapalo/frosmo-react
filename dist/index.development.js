"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var React=require("react"),React__default=_interopDefault(React),PropTypes=_interopDefault(require("prop-types")),assign=_interopDefault(require("object-assign"));function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _extends(){return(_extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}function _objectSpread(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),o.forEach(function(e){_defineProperty(t,e,n[e])})}return t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _possibleConstructorReturn(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?_assertThisInitialized(e):t}var ERR_SPA_UNAVALIABLE="frosmo.spa is not available, fallback to console.error";function error(e){if(!window||!window.frosmo||!window.frosmo.spa)return console.warn(ERR_SPA_UNAVALIABLE),void console.error(e);console.error(e)}var logger={error:error},DOM_EVENT_FROSMO_SPA_READY="frosmo.spa.ready",ModificationService=function(){function o(e){var t=e.id,n=e.onComplete;_classCallCheck(this,o);this._id=t,this._func=n||function(){},this._modificationContextHandle=null,this._fetchModifications=this._fetchModifications.bind(this)}return _createClass(o,[{key:"fetch",value:function(){window&&(window.frosmo&&window.frosmo.spa?this._fetchModifications():window.addEventListener?window.addEventListener(DOM_EVENT_FROSMO_SPA_READY,this._fetchModifications):window.attachEvent?window.attachEvent(DOM_EVENT_FROSMO_SPA_READY,this._fetchModifications):logger.error("Event cannot be attached"))}},{key:"_fetchModifications",value:function(){var t=this;this._modificationContextHandle=window.frosmo.spa.requestBySelector(this._id),this._modificationContextHandle.then(function(e){return t._func(e)}).catch(function(e){logger.error(e),t._func(null)})}},{key:"cancel",value:function(){this._modificationContextHandle&&(this._modificationContextHandle.cancel(),this._modificationContextHandle=null),window.removeEventListener?window.removeEventListener(DOM_EVENT_FROSMO_SPA_READY,this._fetchModifications):window.detachEvent?window.detachEvent(DOM_EVENT_FROSMO_SPA_READY,this._fetchModifications):logger.error("Event cannot be detached"),this._func=null}}]),o}(),ErrorBoundary=function(e){function t(){var e;return _classCallCheck(this,t),(e=_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))).state={isError:!1},e}return _inherits(t,React.Component),_createClass(t,[{key:"componentDidCatch",value:function(e,t){logger.error({error:e,info:t});var n=this.props.onError;n&&n(e,t)}},{key:"render",value:function(){return this.state.isError?null:this.props.children}}],[{key:"getDerivedStateFromError",value:function(){return{isError:!0}}}]),t}();ErrorBoundary.propTypes={onError:PropTypes.func};var _States$DEFAULT,_transitions,StateMachine=function(){function n(e,t){if(_classCallCheck(this,n),this._transitions=e,!this._transitions[t])throw new Error("invalid initial state");this._state=t}return _createClass(n,[{key:"update",value:function(e){var t=this._transitions[this._state];if(t){var n=t[e];n&&(this._state=n)}}},{key:"state",get:function(){return this._state}}]),n}(),States={DEFAULT:"default",NULL:"null",SUCCESS:"success"},Tokens={FETCH_RESOLVE:"onFetchResolve",ERROR:"onError"},transitions=(_defineProperty(_transitions={},States.DEFAULT,(_defineProperty(_States$DEFAULT={},Tokens.FETCH_RESOLVE,States.SUCCESS),_defineProperty(_States$DEFAULT,Tokens.ERROR,States.NULL),_States$DEFAULT)),_defineProperty(_transitions,States.NULL,_defineProperty({},Tokens.FETCH_RESOLVE,States.SUCCESS)),_defineProperty(_transitions,States.SUCCESS,_defineProperty({},Tokens.ERROR,States.DEFAULT)),_transitions);function withModification(t){return function(e){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).onError=t.onError.bind(_assertThisInitialized(t)),e.id||console&&console.warn&&console.warn('FrosmoPlacement: "id" property missing.',e),t.stateMachine=new StateMachine(transitions,States.DEFAULT),t.state={state:t.stateMachine.state,modificationContext:null},t._modificationContextService=new ModificationService({id:e.id,onComplete:function(e){t.stateMachine.update(Tokens.FETCH_RESOLVE),t.setState({modificationContext:e,state:t.stateMachine.state})}}),t}return _inherits(n,React.Component),_createClass(n,[{key:"componentWillUnmount",value:function(){this._modificationContextService.cancel()}},{key:"componentDidMount",value:function(){this._modificationContextService.fetch()}},{key:"onError",value:function(e,t){this.stateMachine.update(Tokens.ERROR),this.setState({state:this.stateMachine.state}),this.props.onError&&this.props.onError(e,t)}},{key:"render",value:function(){switch(this.state.state){case States.DEFAULT:var e=this.props.defaultComponent;return e?React__default.createElement(ErrorBoundary,{onError:this.onError,key:"default"},React__default.createElement(e,this.props)):null;case States.SUCCESS:return React__default.createElement(ErrorBoundary,{onError:this.onError,key:"success"},React__default.createElement(t,_extends({modificationContext:this.state.modificationContext},this.props)));case States.NULL:default:return null}}}]),n}()}var _createReactElement=function(e){return e?React__default.createElement(e):null},hasChildren=function(e){return e&&0<React__default.Children.count(e)},buildMessageProps=function(e){return _objectSpread({},e.params,{frosmoModificationContext:e})},createReactComponent=function(e,t,n){return e?React__default.createElement(e,n):hasChildren(t)?React__default.Children.map(t,function(e){var t=assign({},e.props,n);return React__default.createElement(e.type,t)}):null},_renderSuccess=function(e){var t=e.children,n=e.component,o=e.defaultComponent,r=e.modificationContext,i=buildMessageProps(r),a=createReactComponent(n,t,i);return a?(r.setDisplayed(),a):_createReactElement(o)};function ChildComponent(e){var t=e.defaultComponent;return null!==e.modificationContext?_renderSuccess(e):_createReactElement(t)}var ModificationContextPropTypes={variation:PropTypes.number.isRequired,params:PropTypes.object.isRequired,content:PropTypes.string.isRequired,setDisplayed:PropTypes.func.isRequired,setClicked:PropTypes.func.isRequired,setTrueDisplayed:PropTypes.func.isRequired,setTrackableElements:PropTypes.func.isRequired,startTracking:PropTypes.func.isRequired,error:PropTypes.func.isRequired,clear:PropTypes.func.isRequired},FrosmoPropTypes={children:PropTypes.node,modificationContext:PropTypes.exact(ModificationContextPropTypes)},FrosmoComponentDefaultProps={children:null,component:null,defaultComponent:null,modificationContext:null},FrosmoPlacement=function(e){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,React.Component),_createClass(t,[{key:"componentDidMount",value:function(){var e=this.props.modificationContext;null!==e&&(e.setTrackableElements(this.frosmoMessage),e.startTracking())}},{key:"render",value:function(){var t=this,e=React__default.createElement(ChildComponent,this.props);return this.props.useFragment?React__default.createElement(React__default.Fragment,null,e):React__default.createElement("div",{"data-frosmo-elementid":this.props.id,ref:function(e){t.frosmoMessage=e}},e)}}]),t}();FrosmoPlacement.propTypes=FrosmoPropTypes,FrosmoPlacement.defaultProps=FrosmoComponentDefaultProps;var FrosmoPlacement$1=withModification(FrosmoPlacement);exports.FrosmoPlacement=FrosmoPlacement$1;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZGV2ZWxvcG1lbnQuanMiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy9sb2dnZXIuanMiLCIuLi9zcmMvc2VydmljZXMvTW9kaWZpY2F0aW9uU2VydmljZS5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2Vycm9yLWJvdW5kYXJ5L0Vycm9yQm91bmRhcnkuanMiLCIuLi9zcmMvdXRpbHMvU3RhdGVNYWNoaW5lLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvaG9jcy93aXRoTW9kaWZpY2F0aW9uLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvZnJvc21vLXBsYWNlbWVudC9DaGlsZENvbXBvbmVudC5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2Zyb3Ntby1wbGFjZW1lbnQvc2hhcGVzLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvZnJvc21vLXBsYWNlbWVudC9Gcm9zbW9QbGFjZW1lbnQuanMiLCIuLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIF9fREVWX18gKi9cbmNvbnN0IEVSUl9TUEFfVU5BVkFMSUFCTEUgPSAnZnJvc21vLnNwYSBpcyBub3QgYXZhaWxhYmxlLCBmYWxsYmFjayB0byBjb25zb2xlLmVycm9yJztcblxuZnVuY3Rpb24gZXJyb3IobWVzc2FnZSkge1xuICAgIGlmICghd2luZG93IHx8ICF3aW5kb3cuZnJvc21vIHx8ICF3aW5kb3cuZnJvc21vLnNwYSkge1xuICAgICAgICBjb25zb2xlLndhcm4oRVJSX1NQQV9VTkFWQUxJQUJMRSk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2luZG93LmZyb3Ntby5zcGEubG9nLmVycm9yKG1lc3NhZ2UsICdzcGEucmVhY3QucGxhY2VtZW50Jyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBlcnJvcixcbn1cbiIsImltcG9ydCBsb2dnZXIgZnJvbSBcIi4uL3V0aWxzL2xvZ2dlclwiO1xuXG5jb25zdCBET01fRVZFTlRfRlJPU01PX1NQQV9SRUFEWSA9ICdmcm9zbW8uc3BhLnJlYWR5JztcblxuXG5jbGFzcyBNb2RpZmljYXRpb25TZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGlkLCBvbkNvbXBsZXRlIH0pIHtcbiAgICAgICAgY29uc3Qgbm9vcCA9ICgpID0+IHt9O1xuXG4gICAgICAgIHRoaXMuX2lkID0gaWQ7XG4gICAgICAgIHRoaXMuX2Z1bmMgPSBvbkNvbXBsZXRlIHx8IG5vb3A7XG5cbiAgICAgICAgdGhpcy5fbW9kaWZpY2F0aW9uQ29udGV4dEhhbmRsZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2ZldGNoTW9kaWZpY2F0aW9ucyA9IHRoaXMuX2ZldGNoTW9kaWZpY2F0aW9ucy5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIGZldGNoKCkge1xuICAgICAgICBpZiAoIXdpbmRvdykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHdpbmRvdy5mcm9zbW8gJiYgd2luZG93LmZyb3Ntby5zcGEpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZldGNoTW9kaWZpY2F0aW9ucygpO1xuICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihET01fRVZFTlRfRlJPU01PX1NQQV9SRUFEWSwgdGhpcy5fZmV0Y2hNb2RpZmljYXRpb25zKTtcbiAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cuYXR0YWNoRXZlbnQpIHtcbiAgICAgICAgICAgIHdpbmRvdy5hdHRhY2hFdmVudChET01fRVZFTlRfRlJPU01PX1NQQV9SRUFEWSwgdGhpcy5fZmV0Y2hNb2RpZmljYXRpb25zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcignRXZlbnQgY2Fubm90IGJlIGF0dGFjaGVkJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfZmV0Y2hNb2RpZmljYXRpb25zKCkge1xuICAgICAgICB0aGlzLl9tb2RpZmljYXRpb25Db250ZXh0SGFuZGxlID0gd2luZG93LmZyb3Ntby5zcGEucmVxdWVzdEJ5U2VsZWN0b3IodGhpcy5faWQpO1xuICAgICAgICB0aGlzLl9tb2RpZmljYXRpb25Db250ZXh0SGFuZGxlXG4gICAgICAgICAgICAudGhlbihjb250ZXh0ID0+IHRoaXMuX2Z1bmMoY29udGV4dCkpXG4gICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgdGhpcy5fZnVuYyhudWxsKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX21vZGlmaWNhdGlvbkNvbnRleHRIYW5kbGUpIHtcbiAgICAgICAgICAgIHRoaXMuX21vZGlmaWNhdGlvbkNvbnRleHRIYW5kbGUuY2FuY2VsKCk7XG4gICAgICAgICAgICB0aGlzLl9tb2RpZmljYXRpb25Db250ZXh0SGFuZGxlID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgRE9NX0VWRU5UX0ZST1NNT19TUEFfUkVBRFksXG4gICAgICAgICAgICAgICAgdGhpcy5fZmV0Y2hNb2RpZmljYXRpb25zXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5kZXRhY2hFdmVudCkge1xuICAgICAgICAgICAgd2luZG93LmRldGFjaEV2ZW50KFxuICAgICAgICAgICAgICAgIERPTV9FVkVOVF9GUk9TTU9fU1BBX1JFQURZLFxuICAgICAgICAgICAgICAgIHRoaXMuX2ZldGNoTW9kaWZpY2F0aW9uc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcignRXZlbnQgY2Fubm90IGJlIGRldGFjaGVkJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9mdW5jID0gbnVsbDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1vZGlmaWNhdGlvblNlcnZpY2U7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi4vLi4vdXRpbHMvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXJyb3JCb3VuZGFyeSBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBpc0Vycm9yOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRDYXRjaCAoZXJyb3IsIGluZm8pIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yKHtcbiAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgaW5mbyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgeyBvbkVycm9yIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgICAgICBvbkVycm9yKGVycm9yLCBpbmZvKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc0Vycm9yOiB0cnVlLFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5pc0Vycm9yID8gbnVsbCA6IHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxufVxuXG5FcnJvckJvdW5kYXJ5LnByb3BUeXBlcyA9IHtcbiAgICBvbkVycm9yOiBQcm9wVHlwZXMuZnVuYyxcbn1cbiIsImNsYXNzIFN0YXRlTWFjaGluZSB7XG4gICAgY29uc3RydWN0b3IgKHRyYW5zaXRpb25zLCBpbml0aWFsU3RhdGUpIHtcbiAgICAgICAgdGhpcy5fdHJhbnNpdGlvbnMgPSB0cmFuc2l0aW9ucztcblxuICAgICAgICBpZiAoIXRoaXMuX3RyYW5zaXRpb25zW2luaXRpYWxTdGF0ZV0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBpbml0aWFsIHN0YXRlJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgICB9XG5cbiAgICBnZXQgc3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZTtcbiAgICB9XG5cbiAgICB1cGRhdGUodG9rZW4pIHtcbiAgICAgICAgY29uc3QgbmV3VHJhbnNpdGlvbiA9IHRoaXMuX3RyYW5zaXRpb25zW3RoaXMuX3N0YXRlXTtcblxuICAgICAgICBpZiAoIW5ld1RyYW5zaXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5ld1N0YXRlID0gbmV3VHJhbnNpdGlvblt0b2tlbl07XG5cbiAgICAgICAgaWYgKCFuZXdTdGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc3RhdGUgPSBuZXdTdGF0ZTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN0YXRlTWFjaGluZTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTW9kaWZpY2F0aW9uU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9Nb2RpZmljYXRpb25TZXJ2aWNlJztcbmltcG9ydCBFcnJvckJvdW5kYXJ5IGZyb20gJy4uL2Vycm9yLWJvdW5kYXJ5L0Vycm9yQm91bmRhcnknO1xuaW1wb3J0IFN0YXRlTWFjaGluZSBmcm9tICcuLi8uLi91dGlscy9TdGF0ZU1hY2hpbmUnO1xuXG5cbmNvbnN0IFN0YXRlcyA9IHtcbiAgICBERUZBVUxUOiAnZGVmYXVsdCcsXG4gICAgTlVMTDogJ251bGwnLFxuICAgIFNVQ0NFU1M6ICdzdWNjZXNzJyxcbn07XG5cbmNvbnN0IFRva2VucyA9IHtcbiAgICBGRVRDSF9SRVNPTFZFOiAnb25GZXRjaFJlc29sdmUnLFxuICAgIEVSUk9SOiAnb25FcnJvcicsXG59O1xuXG5jb25zdCB0cmFuc2l0aW9ucyA9IHtcbiAgICBbU3RhdGVzLkRFRkFVTFRdOiB7XG4gICAgICAgIFtUb2tlbnMuRkVUQ0hfUkVTT0xWRV06IFN0YXRlcy5TVUNDRVNTLFxuICAgICAgICBbVG9rZW5zLkVSUk9SXTogU3RhdGVzLk5VTEwsXG4gICAgfSxcbiAgICBbU3RhdGVzLk5VTExdOiB7XG4gICAgICAgIFtUb2tlbnMuRkVUQ0hfUkVTT0xWRV06IFN0YXRlcy5TVUNDRVNTLFxuICAgIH0sXG4gICAgW1N0YXRlcy5TVUNDRVNTXToge1xuICAgICAgICBbVG9rZW5zLkVSUk9SXTogU3RhdGVzLkRFRkFVTFQsXG4gICAgfSxcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd2l0aE1vZGlmaWNhdGlvbihXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgcmV0dXJuIGNsYXNzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICAgICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICAgICAgdGhpcy5vbkVycm9yID0gdGhpcy5vbkVycm9yLmJpbmQodGhpcyk7XG5cbiAgICAgICAgICAgIGlmICghcHJvcHMuaWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlICYmIGNvbnNvbGUud2FybiAmJiBjb25zb2xlLndhcm4oJ0Zyb3Ntb1BsYWNlbWVudDogXCJpZFwiIHByb3BlcnR5IG1pc3NpbmcuJywgcHJvcHMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBtYW5hZ2UgbW9kaWZpY2F0aW9uIHN0YXRlIGFzIHN0YXRlIGF1dG9tYXRhXG4gICAgICAgICAgICB0aGlzLnN0YXRlTWFjaGluZSA9IG5ldyBTdGF0ZU1hY2hpbmUodHJhbnNpdGlvbnMsIFN0YXRlcy5ERUZBVUxUKTtcblxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICBzdGF0ZTogdGhpcy5zdGF0ZU1hY2hpbmUuc3RhdGUsXG4gICAgICAgICAgICAgICAgbW9kaWZpY2F0aW9uQ29udGV4dDogbnVsbCxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMuX21vZGlmaWNhdGlvbkNvbnRleHRTZXJ2aWNlID0gbmV3IE1vZGlmaWNhdGlvblNlcnZpY2Uoe1xuICAgICAgICAgICAgICAgIGlkOiBwcm9wcy5pZCxcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiAobW9kaWZpY2F0aW9uQ29udGV4dCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlTWFjaGluZS51cGRhdGUoVG9rZW5zLkZFVENIX1JFU09MVkUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWNhdGlvbkNvbnRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogdGhpcy5zdGF0ZU1hY2hpbmUuc3RhdGUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgICAgICB0aGlzLl9tb2RpZmljYXRpb25Db250ZXh0U2VydmljZS5jYW5jZWwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICAgICAgdGhpcy5fbW9kaWZpY2F0aW9uQ29udGV4dFNlcnZpY2UuZmV0Y2goKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9uRXJyb3IoZXJyb3IsIGluZm8pIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVNYWNoaW5lLnVwZGF0ZShUb2tlbnMuRVJST1IpO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgc3RhdGU6IHRoaXMuc3RhdGVNYWNoaW5lLnN0YXRlLFxuICAgICAgICAgICAgfSk7XG4gICAgXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5vbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkVycm9yKGVycm9yLCBpbmZvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5zdGF0ZS5zdGF0ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgU3RhdGVzLkRFRkFVTFQ6XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IERlZmF1bHRDb21wb25lbnQgPSB0aGlzLnByb3BzLmRlZmF1bHRDb21wb25lbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFEZWZhdWx0Q29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8RXJyb3JCb3VuZGFyeSBvbkVycm9yPXt0aGlzLm9uRXJyb3J9IGtleT1cImRlZmF1bHRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RGVmYXVsdENvbXBvbmVudCB7Li4udGhpcy5wcm9wc30vPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9FcnJvckJvdW5kYXJ5PlxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBTdGF0ZXMuU1VDQ0VTUzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxFcnJvckJvdW5kYXJ5IG9uRXJyb3I9e3RoaXMub25FcnJvcn0ga2V5PVwic3VjY2Vzc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxXcmFwcGVkQ29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWNhdGlvbkNvbnRleHQ9e3RoaXMuc3RhdGUubW9kaWZpY2F0aW9uQ29udGV4dH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvRXJyb3JCb3VuZGFyeT5cbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGNhc2UgU3RhdGVzLk5VTEw6XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGFzc2lnbiBmcm9tICdvYmplY3QtYXNzaWduJztcblxuXG5jb25zdCBfY3JlYXRlUmVhY3RFbGVtZW50ID0gY29tcG9uZW50ID0+XG4gICAgY29tcG9uZW50XG4gICAgICAgID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQpXG4gICAgICAgIDogbnVsbDtcblxuY29uc3QgaGFzQ2hpbGRyZW4gPSAoY2hpbGRyZW4pID0+IGNoaWxkcmVuICYmIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA+IDA7XG5jb25zdCBidWlsZE1lc3NhZ2VQcm9wcyA9IChtb2RpZmljYXRpb25Db250ZXh0KSA9PiB7XG4gICAgLy8gU2V0IHRlbXBsYXRlRGVmYXVsdHMgYXMgcHJvcHNcbiAgICBjb25zdCB7IHBhcmFtcyB9ID0gbW9kaWZpY2F0aW9uQ29udGV4dDtcblxuICAgIC8vIEJ1aWxkIHByb3BzIGZvciBtb2RpZmljYXRpb24gY29tcG9uZW50XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucGFyYW1zLFxuICAgICAgICBmcm9zbW9Nb2RpZmljYXRpb25Db250ZXh0OiBtb2RpZmljYXRpb25Db250ZXh0LFxuICAgIH07XG59O1xuXG5jb25zdCBjcmVhdGVSZWFjdENvbXBvbmVudCA9IChjb21wb25lbnQsIGNoaWxkcmVuLCBtZXNzYWdlUHJvcHMpID0+IHtcbiAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgbWVzc2FnZVByb3BzKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NoaWxkcmVuKGNoaWxkcmVuKSkge1xuICAgICAgICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBjaGlsZCA9PiB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZFByb3BzID0gYXNzaWduKHt9LCBjaGlsZC5wcm9wcywgbWVzc2FnZVByb3BzKTtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNoaWxkLnR5cGUsIGNoaWxkUHJvcHMpO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59O1xuXG4vKipcbiAqIEN1c3RvbSBSZWFjdCBjb21wb25lbnQgcHJvdmlkZWQgYnkgRnJvc21vIChKb29uYSBPamFwYWxvKVxuICovXG5jb25zdCBfcmVuZGVyU3VjY2VzcyA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIGNvbXBvbmVudCxcbiAgICAgICAgZGVmYXVsdENvbXBvbmVudCxcbiAgICAgICAgbW9kaWZpY2F0aW9uQ29udGV4dCxcbiAgICB9ID0gcHJvcHM7XG5cbiAgICBjb25zdCBtZXNzYWdlUHJvcHMgPSBidWlsZE1lc3NhZ2VQcm9wcyhtb2RpZmljYXRpb25Db250ZXh0KTtcbiAgICBjb25zdCBvdXRwdXRDb21wb25lbnQgPSBjcmVhdGVSZWFjdENvbXBvbmVudChjb21wb25lbnQsIGNoaWxkcmVuLCBtZXNzYWdlUHJvcHMpO1xuXG4gICAgLy8gRGlzcGxheSB0cmFja2luZ1xuICAgIGlmICghb3V0cHV0Q29tcG9uZW50KSB7XG4gICAgICAgIC8vIFNob3cgZGVmYXVsdENvbXBvbmVudFxuICAgICAgICByZXR1cm4gX2NyZWF0ZVJlYWN0RWxlbWVudChkZWZhdWx0Q29tcG9uZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBtb2RpZmljYXRpb25Db250ZXh0LnNldERpc3BsYXllZCgpO1xuICAgICAgICByZXR1cm4gb3V0cHV0Q29tcG9uZW50O1xuICAgIH1cbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgY29uc3Qge1xuICAgICAgICBkZWZhdWx0Q29tcG9uZW50LFxuICAgICAgICBtb2RpZmljYXRpb25Db250ZXh0XG4gICAgfSA9IHByb3BzO1xuXG4gICAgaWYgKG1vZGlmaWNhdGlvbkNvbnRleHQgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIF9yZW5kZXJTdWNjZXNzKHByb3BzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2NyZWF0ZVJlYWN0RWxlbWVudChkZWZhdWx0Q29tcG9uZW50KTtcbn07XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY29uc3QgTW9kaWZpY2F0aW9uQ29udGV4dFByb3BUeXBlcyA9IHtcbiAgICB2YXJpYXRpb246IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICBwYXJhbXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBjb250ZW50OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgc2V0RGlzcGxheWVkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHNldENsaWNrZWQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2V0VHJ1ZURpc3BsYXllZDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzZXRUcmFja2FibGVFbGVtZW50czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzdGFydFRyYWNraW5nOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGVycm9yOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNsZWFyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cbmNvbnN0IEZyb3Ntb1Byb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgbW9kaWZpY2F0aW9uQ29udGV4dDogUHJvcFR5cGVzLmV4YWN0KE1vZGlmaWNhdGlvbkNvbnRleHRQcm9wVHlwZXMpLFxufTtcblxuZXhwb3J0IHtcbiAgICBGcm9zbW9Qcm9wVHlwZXMsXG59XG4iLCIvKiBnbG9iYWwgZnJvc21vICovXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQ2hpbGRDb21wb25lbnQgZnJvbSAnLi9DaGlsZENvbXBvbmVudCc7XG5cbmltcG9ydCB7IEZyb3Ntb1Byb3BUeXBlcyB9IGZyb20gXCIuL3NoYXBlc1wiO1xuXG5jb25zdCBGcm9zbW9Db21wb25lbnREZWZhdWx0UHJvcHMgPSB7XG4gICAgY2hpbGRyZW46IG51bGwsXG4gICAgY29tcG9uZW50OiBudWxsLFxuICAgIGRlZmF1bHRDb21wb25lbnQ6IG51bGwsXG4gICAgbW9kaWZpY2F0aW9uQ29udGV4dDogbnVsbCxcbn07XG5cbmNsYXNzIEZyb3Ntb1BsYWNlbWVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBjb25zdCB7IG1vZGlmaWNhdGlvbkNvbnRleHQgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGlmIChtb2RpZmljYXRpb25Db250ZXh0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBzdGFydCB0cmFja2luZyB0aGUgbWVzc2FnZVxuICAgICAgICAgICAgbW9kaWZpY2F0aW9uQ29udGV4dC5zZXRUcmFja2FibGVFbGVtZW50cyh0aGlzLmZyb3Ntb01lc3NhZ2UpO1xuICAgICAgICAgICAgbW9kaWZpY2F0aW9uQ29udGV4dC5zdGFydFRyYWNraW5nKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIC8vIFBhc3Mgc3RhdGUgYXMgaW1tdXRhYmxlIHByb3BzXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSA8Q2hpbGRDb21wb25lbnQgey4uLnRoaXMucHJvcHN9IC8+O1xuXG4gICAgICAgIC8vIFdyYXAgaW4gZnJhZ21lbnRcbiAgICAgICAgaWYgKHRoaXMucHJvcHMudXNlRnJhZ21lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiA8UmVhY3QuRnJhZ21lbnQ+e2VsZW1lbnR9PC9SZWFjdC5GcmFnbWVudD47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXcmFwIGluc2lkZSBhIHRyYWNrYWJsZSBkaXYgZWxlbWVudFxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGRhdGEtZnJvc21vLWVsZW1lbnRpZD17dGhpcy5wcm9wcy5pZH1cbiAgICAgICAgICAgICAgICByZWY9eyByZWYgPT4geyB0aGlzLmZyb3Ntb01lc3NhZ2UgPSByZWY7IH0gfT5cblxuICAgICAgICAgICAgICAgICAgICB7ZWxlbWVudH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuRnJvc21vUGxhY2VtZW50LnByb3BUeXBlcyA9IEZyb3Ntb1Byb3BUeXBlcztcbkZyb3Ntb1BsYWNlbWVudC5kZWZhdWx0UHJvcHMgPSBGcm9zbW9Db21wb25lbnREZWZhdWx0UHJvcHM7XG5cbmV4cG9ydCBkZWZhdWx0IEZyb3Ntb1BsYWNlbWVudDtcbiIsImltcG9ydCB3aXRoTW9kaWZpY2F0aW9uIGZyb20gJy4vY29tcG9uZW50cy9ob2NzL3dpdGhNb2RpZmljYXRpb24nO1xuaW1wb3J0IEZyb3Ntb1BsYWNlbWVudENvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudHMvZnJvc21vLXBsYWNlbWVudCc7XG5cbmNvbnN0IEZyb3Ntb1BsYWNlbWVudCA9IHdpdGhNb2RpZmljYXRpb24oRnJvc21vUGxhY2VtZW50Q29tcG9uZW50KTtcblxuZXhwb3J0IHtcbiAgICBGcm9zbW9QbGFjZW1lbnQsXG59O1xuIl0sIm5hbWVzIjpbIkVSUl9TUEFfVU5BVkFMSUFCTEUiLCJlcnJvciIsIm1lc3NhZ2UiLCJ3aW5kb3ciLCJmcm9zbW8iLCJzcGEiLCJjb25zb2xlIiwid2FybiIsIkRPTV9FVkVOVF9GUk9TTU9fU1BBX1JFQURZIiwiTW9kaWZpY2F0aW9uU2VydmljZSIsImlkIiwib25Db21wbGV0ZSIsIl9pZCIsIl9mdW5jIiwiX21vZGlmaWNhdGlvbkNvbnRleHRIYW5kbGUiLCJfZmV0Y2hNb2RpZmljYXRpb25zIiwidGhpcyIsImJpbmQiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJsb2dnZXIiLCJyZXF1ZXN0QnlTZWxlY3RvciIsInRoZW4iLCJjb250ZXh0IiwiX3RoaXMiLCJjYXRjaCIsImNhbmNlbCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsIkVycm9yQm91bmRhcnkiLCJzdGF0ZSIsImlzRXJyb3IiLCJDb21wb25lbnQiLCJpbmZvIiwib25FcnJvciIsInByb3BzIiwiY2hpbGRyZW4iLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJmdW5jIiwiU3RhdGVNYWNoaW5lIiwidHJhbnNpdGlvbnMiLCJpbml0aWFsU3RhdGUiLCJfdHJhbnNpdGlvbnMiLCJFcnJvciIsIl9zdGF0ZSIsInRva2VuIiwibmV3VHJhbnNpdGlvbiIsIm5ld1N0YXRlIiwiU3RhdGVzIiwiREVGQVVMVCIsIk5VTEwiLCJTVUNDRVNTIiwiVG9rZW5zIiwiRkVUQ0hfUkVTT0xWRSIsIkVSUk9SIiwid2l0aE1vZGlmaWNhdGlvbiIsIldyYXBwZWRDb21wb25lbnQiLCJzdGF0ZU1hY2hpbmUiLCJtb2RpZmljYXRpb25Db250ZXh0IiwiX21vZGlmaWNhdGlvbkNvbnRleHRTZXJ2aWNlIiwidXBkYXRlIiwic2V0U3RhdGUiLCJmZXRjaCIsIkRlZmF1bHRDb21wb25lbnQiLCJkZWZhdWx0Q29tcG9uZW50IiwiUmVhY3QiLCJrZXkiLCJfY3JlYXRlUmVhY3RFbGVtZW50IiwiY29tcG9uZW50IiwiY3JlYXRlRWxlbWVudCIsImhhc0NoaWxkcmVuIiwiQ2hpbGRyZW4iLCJjb3VudCIsImJ1aWxkTWVzc2FnZVByb3BzIiwicGFyYW1zIiwiZnJvc21vTW9kaWZpY2F0aW9uQ29udGV4dCIsImNyZWF0ZVJlYWN0Q29tcG9uZW50IiwibWVzc2FnZVByb3BzIiwibWFwIiwiY2hpbGQiLCJjaGlsZFByb3BzIiwiYXNzaWduIiwidHlwZSIsIl9yZW5kZXJTdWNjZXNzIiwib3V0cHV0Q29tcG9uZW50Iiwic2V0RGlzcGxheWVkIiwiTW9kaWZpY2F0aW9uQ29udGV4dFByb3BUeXBlcyIsInZhcmlhdGlvbiIsIm51bWJlciIsImlzUmVxdWlyZWQiLCJvYmplY3QiLCJjb250ZW50Iiwic3RyaW5nIiwic2V0Q2xpY2tlZCIsInNldFRydWVEaXNwbGF5ZWQiLCJzZXRUcmFja2FibGVFbGVtZW50cyIsInN0YXJ0VHJhY2tpbmciLCJjbGVhciIsIkZyb3Ntb1Byb3BUeXBlcyIsIm5vZGUiLCJleGFjdCIsIkZyb3Ntb0NvbXBvbmVudERlZmF1bHRQcm9wcyIsIkZyb3Ntb1BsYWNlbWVudCIsImZyb3Ntb01lc3NhZ2UiLCJlbGVtZW50IiwiQ2hpbGRDb21wb25lbnQiLCJ1c2VGcmFnbWVudCIsIkZyYWdtZW50IiwicmVmIiwiZGVmYXVsdFByb3BzIiwiRnJvc21vUGxhY2VtZW50Q29tcG9uZW50Il0sIm1hcHBpbmdzIjoieXBFQUNBLElBQU1BLG9CQUFzQix5REFFNUIsU0FBU0MsTUFBTUMsT0FDTkMsU0FBV0EsT0FBT0MsU0FBV0QsT0FBT0MsT0FBT0MsV0FDNUNDLFFBQVFDLEtBQUtQLDBCQUNiTSxRQUFRTCxNQUFNQyxHQUtkSSxRQUFRTCxNQUFNQyxHQU90QixXQUFlLENBQ1hELE1BQUFBLE9DakJFTywyQkFBNkIsbUJBRzdCQyxpREFDWUMsSUFBQUEsR0FBSUMsSUFBQUEsd0NBR1RDLElBQU1GLE9BQ05HLE1BQVFGLEdBSEEsa0JBS1JHLDJCQUE2QixVQUM3QkMsb0JBQXNCQyxLQUFLRCxvQkFBb0JFLEtBQUtELDJEQUlwRGIsU0FJREEsT0FBT0MsUUFBVUQsT0FBT0MsT0FBT0MsU0FDMUJVLHNCQUNFWixPQUFPZSxpQkFDZGYsT0FBT2UsaUJBQWlCViwyQkFBNEJRLEtBQUtELHFCQUNsRFosT0FBT2dCLFlBQ2RoQixPQUFPZ0IsWUFBWVgsMkJBQTRCUSxLQUFLRCxxQkFFcERLLE9BQU9uQixNQUFNLDJGQUtaYSwyQkFBNkJYLE9BQU9DLE9BQU9DLElBQUlnQixrQkFBa0JMLEtBQUtKLFVBQ3RFRSwyQkFDQVEsS0FBSyxTQUFBQyxVQUFXQyxFQUFLWCxNQUFNVSxLQUMzQkUsTUFBTSxTQUFBeEIsR0FDSG1CLE9BQU9uQixNQUFNQSxHQUNidUIsRUFBS1gsTUFBTSx5Q0FLZkcsS0FBS0Ysa0NBQ0FBLDJCQUEyQlksY0FDM0JaLDJCQUE2QixNQUdsQ1gsT0FBT3dCLG9CQUNQeEIsT0FBT3dCLG9CQUNIbkIsMkJBQ0FRLEtBQUtELHFCQUVGWixPQUFPeUIsWUFDZHpCLE9BQU95QixZQUNIcEIsMkJBQ0FRLEtBQUtELHFCQUdUSyxPQUFPbkIsTUFBTSxpQ0FHWlksTUFBUSxjQzFEQWdC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
